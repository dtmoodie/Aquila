// clang-format off
#include "@PLUGIN_NAME@/@PLUGIN_NAME@_export.hpp"
#include <MetaObject/object/MetaObjectFactory.hpp>
#include <RuntimeObjectSystem/ObjectInterfacePerModule.h>

const char* getPluginBuildInfo()
{
    return "@PLUGIN_NAME@\n"
           "  Compiler         : @CMAKE_CXX_COMPILER_ID@\n"
           "    version        : @CMAKE_CXX_COMPILER_VERSION@\n"
           "  Build date       : @BUILD_DATE@\n"
           "  @REPO_TYPE@ branch       : @GIT_BRANCH@\n"
           "  @REPO_TYPE@ hash         : @GIT_COMMIT_HASH@\n"
           "  Aquila version   : @Aquila_VERSION@\n"
           "  Aquila branch    : @AQUILA_GIT_BRANCH@\n"
           "  Aquila hash      : @AQUILA_GIT_COMMIT_HASH@\n"
           "  MetaObject branch: @MO_GIT_BRANCH@\n"
           "  MetaObject hash  : @MO_GIT_COMMIT_HASH@\n"
           "  cxx flags        : @CMAKE_CXX_FLAGS@\n"
#ifdef _DEBUG
           "  debug flags      : @CMAKE_CXX_FLAGS_DEBUG@\n"
#else
           "  release flags    : @CMAKE_CXX_FLAGS_RELEASE@\n"
#endif
           "  CUDA VERSION     : @CUDA_VERSION@\n"
           "  builder          : @GIT_USERNAME@ - @GIT_EMAIL@\n";
}

void initPlugin(const int32_t id, mo::MetaObjectFactory* factory)
{
    @PLUGIN_NAME@::initPlugin(id, factory);
}

namespace @PLUGIN_NAME@
{
    void initPlugin(const int32_t id, mo::MetaObjectFactory* factory)
    {
        static bool initialized = false;
        if(!initialized)
        {
            mo::PluginCompilationOptions options;
            options.includes = getPluginIncludes();
            options.link_dirs_debug = getPluginLinkDirsDebug();
            options.link_dirs_release = getPluginLinkDirsRelease();
            options.compile_options = getPluginCompileOptions();
            options.compile_definitions = getPluginCompileDefinitions();
            options.link_libs = getPluginLinkLibs();
            options.link_libs_debug = getPluginLinkLibsDebug();
            options.link_libs_release = getPluginLinkLibsRelease();
            options.compiler = getCompiler();
            PerModuleInterface::GetInstance()->SetProjectIdForAllConstructors(id);
            factory->setupPluginCompilationOptions(id, options);
            factory->setupObjectConstructors(PerModuleInterface::GetInstance());
            initialized = true;
        }
    }

}

// clang-format on
