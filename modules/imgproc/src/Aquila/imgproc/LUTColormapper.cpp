#include "Aquila/utilities/LUTColormapper.hpp"
#include "Aquila/utilities/ColorMapperFactory.hpp"

using namespace aq;
LUTColorMapper::LUTColorMapper()
{
    float r[] = {0,
                 0,
                 0,
                 0,
                 0,
                 0,
                 0,
                 0,
                 0,
                 0,
                 0,
                 0,
                 0,
                 0,
                 0,
                 0,
                 0,
                 0,
                 0,
                 0,
                 0,
                 0,
                 0,
                 0,
                 0,
                 0,
                 0,
                 0,
                 0,
                 0,
                 0,
                 0,
                 0,
                 0,
                 0,
                 0,
                 0,
                 0,
                 0,
                 0,
                 0,
                 0,
                 0,
                 0,
                 0,
                 0,
                 0,
                 0,
                 0,
                 0,
                 0,
                 0,
                 0,
                 0,
                 0,
                 0,
                 0,
                 0,
                 0,
                 0,
                 0,
                 0,
                 0,
                 0,
                 0,
                 0,
                 0,
                 0,
                 0,
                 0,
                 0,
                 0,
                 0,
                 0,
                 0,
                 0,
                 0,
                 0,
                 0,
                 0,
                 0,
                 0,
                 0,
                 0,
                 0,
                 0,
                 0,
                 0,
                 0,
                 0,
                 0,
                 0,
                 0,
                 0,
                 0,
                 0,
                 0.00588235294117645f,
                 0.02156862745098032f,
                 0.03725490196078418f,
                 0.05294117647058827f,
                 0.06862745098039214f,
                 0.084313725490196f,
                 0.1000000000000001f,
                 0.115686274509804f,
                 0.1313725490196078f,
                 0.1470588235294117f,
                 0.1627450980392156f,
                 0.1784313725490196f,
                 0.1941176470588235f,
                 0.2098039215686274f,
                 0.2254901960784315f,
                 0.2411764705882353f,
                 0.2568627450980392f,
                 0.2725490196078431f,
                 0.2882352941176469f,
                 0.303921568627451f,
                 0.3196078431372549f,
                 0.3352941176470587f,
                 0.3509803921568628f,
                 0.3666666666666667f,
                 0.3823529411764706f,
                 0.3980392156862744f,
                 0.4137254901960783f,
                 0.4294117647058824f,
                 0.4450980392156862f,
                 0.4607843137254901f,
                 0.4764705882352942f,
                 0.4921568627450981f,
                 0.5078431372549019f,
                 0.5235294117647058f,
                 0.5392156862745097f,
                 0.5549019607843135f,
                 0.5705882352941174f,
                 0.5862745098039217f,
                 0.6019607843137256f,
                 0.6176470588235294f,
                 0.6333333333333333f,
                 0.6490196078431372f,
                 0.664705882352941f,
                 0.6803921568627449f,
                 0.6960784313725492f,
                 0.7117647058823531f,
                 0.7274509803921569f,
                 0.7431372549019608f,
                 0.7588235294117647f,
                 0.7745098039215685f,
                 0.7901960784313724f,
                 0.8058823529411763f,
                 0.8215686274509801f,
                 0.8372549019607844f,
                 0.8529411764705883f,
                 0.8686274509803922f,
                 0.884313725490196f,
                 0.8999999999999999f,
                 0.9156862745098038f,
                 0.9313725490196076f,
                 0.947058823529412f,
                 0.9627450980392158f,
                 0.9784313725490197f,
                 0.9941176470588236f,
                 1,
                 1,
                 1,
                 1,
                 1,
                 1,
                 1,
                 1,
                 1,
                 1,
                 1,
                 1,
                 1,
                 1,
                 1,
                 1,
                 1,
                 1,
                 1,
                 1,
                 1,
                 1,
                 1,
                 1,
                 1,
                 1,
                 1,
                 1,
                 1,
                 1,
                 1,
                 1,
                 1,
                 1,
                 1,
                 1,
                 1,
                 1,
                 1,
                 1,
                 1,
                 1,
                 1,
                 1,
                 1,
                 1,
                 1,
                 1,
                 1,
                 1,
                 1,
                 1,
                 1,
                 1,
                 1,
                 1,
                 1,
                 1,
                 1,
                 1,
                 1,
                 1,
                 1,
                 1,
                 0.9862745098039216f,
                 0.9705882352941178f,
                 0.9549019607843139f,
                 0.93921568627451f,
                 0.9235294117647062f,
                 0.9078431372549018f,
                 0.892156862745098f,
                 0.8764705882352941f,
                 0.8607843137254902f,
                 0.8450980392156864f,
                 0.8294117647058825f,
                 0.8137254901960786f,
                 0.7980392156862743f,
                 0.7823529411764705f,
                 0.7666666666666666f,
                 0.7509803921568627f,
                 0.7352941176470589f,
                 0.719607843137255f,
                 0.7039215686274511f,
                 0.6882352941176473f,
                 0.6725490196078434f,
                 0.6568627450980391f,
                 0.6411764705882352f,
                 0.6254901960784314f,
                 0.6098039215686275f,
                 0.5941176470588236f,
                 0.5784313725490198f,
                 0.5627450980392159f,
                 0.5470588235294116f,
                 0.5313725490196077f,
                 0.5156862745098039f,
                 0.5f};
    float g[] = {0,
                 0,
                 0,
                 0,
                 0,
                 0,
                 0,
                 0,
                 0,
                 0,
                 0,
                 0,
                 0,
                 0,
                 0,
                 0,
                 0,
                 0,
                 0,
                 0,
                 0,
                 0,
                 0,
                 0,
                 0,
                 0,
                 0,
                 0,
                 0,
                 0,
                 0,
                 0,
                 0.001960784313725483f,
                 0.01764705882352935f,
                 0.03333333333333333f,
                 0.0490196078431373f,
                 0.06470588235294117f,
                 0.08039215686274503f,
                 0.09607843137254901f,
                 0.111764705882353f,
                 0.1274509803921569f,
                 0.1431372549019607f,
                 0.1588235294117647f,
                 0.1745098039215687f,
                 0.1901960784313725f,
                 0.2058823529411764f,
                 0.2215686274509804f,
                 0.2372549019607844f,
                 0.2529411764705882f,
                 0.2686274509803921f,
                 0.2843137254901961f,
                 0.3f,
                 0.3156862745098039f,
                 0.3313725490196078f,
                 0.3470588235294118f,
                 0.3627450980392157f,
                 0.3784313725490196f,
                 0.3941176470588235f,
                 0.4098039215686274f,
                 0.4254901960784314f,
                 0.4411764705882353f,
                 0.4568627450980391f,
                 0.4725490196078431f,
                 0.4882352941176471f,
                 0.503921568627451f,
                 0.5196078431372548f,
                 0.5352941176470587f,
                 0.5509803921568628f,
                 0.5666666666666667f,
                 0.5823529411764705f,
                 0.5980392156862746f,
                 0.6137254901960785f,
                 0.6294117647058823f,
                 0.6450980392156862f,
                 0.6607843137254901f,
                 0.6764705882352942f,
                 0.692156862745098f,
                 0.7078431372549019f,
                 0.723529411764706f,
                 0.7392156862745098f,
                 0.7549019607843137f,
                 0.7705882352941176f,
                 0.7862745098039214f,
                 0.8019607843137255f,
                 0.8176470588235294f,
                 0.8333333333333333f,
                 0.8490196078431373f,
                 0.8647058823529412f,
                 0.8803921568627451f,
                 0.8960784313725489f,
                 0.9117647058823528f,
                 0.9274509803921569f,
                 0.9431372549019608f,
                 0.9588235294117646f,
                 0.9745098039215687f,
                 0.9901960784313726f,
                 1,
                 1,
                 1,
                 1,
                 1,
                 1,
                 1,
                 1,
                 1,
                 1,
                 1,
                 1,
                 1,
                 1,
                 1,
                 1,
                 1,
                 1,
                 1,
                 1,
                 1,
                 1,
                 1,
                 1,
                 1,
                 1,
                 1,
                 1,
                 1,
                 1,
                 1,
                 1,
                 1,
                 1,
                 1,
                 1,
                 1,
                 1,
                 1,
                 1,
                 1,
                 1,
                 1,
                 1,
                 1,
                 1,
                 1,
                 1,
                 1,
                 1,
                 1,
                 1,
                 1,
                 1,
                 1,
                 1,
                 1,
                 1,
                 1,
                 1,
                 1,
                 1,
                 1,
                 1,
                 0.9901960784313726f,
                 0.9745098039215687f,
                 0.9588235294117649f,
                 0.943137254901961f,
                 0.9274509803921571f,
                 0.9117647058823528f,
                 0.8960784313725489f,
                 0.8803921568627451f,
                 0.8647058823529412f,
                 0.8490196078431373f,
                 0.8333333333333335f,
                 0.8176470588235296f,
                 0.8019607843137253f,
                 0.7862745098039214f,
                 0.7705882352941176f,
                 0.7549019607843137f,
                 0.7392156862745098f,
                 0.723529411764706f,
                 0.7078431372549021f,
                 0.6921568627450982f,
                 0.6764705882352944f,
                 0.6607843137254901f,
                 0.6450980392156862f,
                 0.6294117647058823f,
                 0.6137254901960785f,
                 0.5980392156862746f,
                 0.5823529411764707f,
                 0.5666666666666669f,
                 0.5509803921568626f,
                 0.5352941176470587f,
                 0.5196078431372548f,
                 0.503921568627451f,
                 0.4882352941176471f,
                 0.4725490196078432f,
                 0.4568627450980394f,
                 0.4411764705882355f,
                 0.4254901960784316f,
                 0.4098039215686273f,
                 0.3941176470588235f,
                 0.3784313725490196f,
                 0.3627450980392157f,
                 0.3470588235294119f,
                 0.331372549019608f,
                 0.3156862745098041f,
                 0.2999999999999998f,
                 0.284313725490196f,
                 0.2686274509803921f,
                 0.2529411764705882f,
                 0.2372549019607844f,
                 0.2215686274509805f,
                 0.2058823529411766f,
                 0.1901960784313728f,
                 0.1745098039215689f,
                 0.1588235294117646f,
                 0.1431372549019607f,
                 0.1274509803921569f,
                 0.111764705882353f,
                 0.09607843137254912f,
                 0.08039215686274526f,
                 0.06470588235294139f,
                 0.04901960784313708f,
                 0.03333333333333321f,
                 0.01764705882352935f,
                 0.001960784313725483f,
                 0,
                 0,
                 0,
                 0,
                 0,
                 0,
                 0,
                 0,
                 0,
                 0,
                 0,
                 0,
                 0,
                 0,
                 0,
                 0,
                 0,
                 0,
                 0,
                 0,
                 0,
                 0,
                 0,
                 0,
                 0,
                 0,
                 0,
                 0,
                 0,
                 0,
                 0,
                 0};
    float b[] = {0.5f,
                 0.5156862745098039f,
                 0.5313725490196078f,
                 0.5470588235294118f,
                 0.5627450980392157f,
                 0.5784313725490196f,
                 0.5941176470588235f,
                 0.6098039215686275f,
                 0.6254901960784314f,
                 0.6411764705882352f,
                 0.6568627450980392f,
                 0.6725490196078432f,
                 0.6882352941176471f,
                 0.7039215686274509f,
                 0.7196078431372549f,
                 0.7352941176470589f,
                 0.7509803921568627f,
                 0.7666666666666666f,
                 0.7823529411764706f,
                 0.7980392156862746f,
                 0.8137254901960784f,
                 0.8294117647058823f,
                 0.8450980392156863f,
                 0.8607843137254902f,
                 0.8764705882352941f,
                 0.892156862745098f,
                 0.907843137254902f,
                 0.9235294117647059f,
                 0.9392156862745098f,
                 0.9549019607843137f,
                 0.9705882352941176f,
                 0.9862745098039216f,
                 1,
                 1,
                 1,
                 1,
                 1,
                 1,
                 1,
                 1,
                 1,
                 1,
                 1,
                 1,
                 1,
                 1,
                 1,
                 1,
                 1,
                 1,
                 1,
                 1,
                 1,
                 1,
                 1,
                 1,
                 1,
                 1,
                 1,
                 1,
                 1,
                 1,
                 1,
                 1,
                 1,
                 1,
                 1,
                 1,
                 1,
                 1,
                 1,
                 1,
                 1,
                 1,
                 1,
                 1,
                 1,
                 1,
                 1,
                 1,
                 1,
                 1,
                 1,
                 1,
                 1,
                 1,
                 1,
                 1,
                 1,
                 1,
                 1,
                 1,
                 1,
                 1,
                 1,
                 1,
                 0.9941176470588236f,
                 0.9784313725490197f,
                 0.9627450980392158f,
                 0.9470588235294117f,
                 0.9313725490196079f,
                 0.915686274509804f,
                 0.8999999999999999f,
                 0.884313725490196f,
                 0.8686274509803922f,
                 0.8529411764705883f,
                 0.8372549019607844f,
                 0.8215686274509804f,
                 0.8058823529411765f,
                 0.7901960784313726f,
                 0.7745098039215685f,
                 0.7588235294117647f,
                 0.7431372549019608f,
                 0.7274509803921569f,
                 0.7117647058823531f,
                 0.696078431372549f,
                 0.6803921568627451f,
                 0.6647058823529413f,
                 0.6490196078431372f,
                 0.6333333333333333f,
                 0.6176470588235294f,
                 0.6019607843137256f,
                 0.5862745098039217f,
                 0.5705882352941176f,
                 0.5549019607843138f,
                 0.5392156862745099f,
                 0.5235294117647058f,
                 0.5078431372549019f,
                 0.4921568627450981f,
                 0.4764705882352942f,
                 0.4607843137254903f,
                 0.4450980392156865f,
                 0.4294117647058826f,
                 0.4137254901960783f,
                 0.3980392156862744f,
                 0.3823529411764706f,
                 0.3666666666666667f,
                 0.3509803921568628f,
                 0.335294117647059f,
                 0.3196078431372551f,
                 0.3039215686274508f,
                 0.2882352941176469f,
                 0.2725490196078431f,
                 0.2568627450980392f,
                 0.2411764705882353f,
                 0.2254901960784315f,
                 0.2098039215686276f,
                 0.1941176470588237f,
                 0.1784313725490199f,
                 0.1627450980392156f,
                 0.1470588235294117f,
                 0.1313725490196078f,
                 0.115686274509804f,
                 0.1000000000000001f,
                 0.08431372549019622f,
                 0.06862745098039236f,
                 0.05294117647058805f,
                 0.03725490196078418f,
                 0.02156862745098032f,
                 0.00588235294117645f,
                 0,
                 0,
                 0,
                 0,
                 0,
                 0,
                 0,
                 0,
                 0,
                 0,
                 0,
                 0,
                 0,
                 0,
                 0,
                 0,
                 0,
                 0,
                 0,
                 0,
                 0,
                 0,
                 0,
                 0,
                 0,
                 0,
                 0,
                 0,
                 0,
                 0,
                 0,
                 0,
                 0,
                 0,
                 0,
                 0,
                 0,
                 0,
                 0,
                 0,
                 0,
                 0,
                 0,
                 0,
                 0,
                 0,
                 0,
                 0,
                 0,
                 0,
                 0,
                 0,
                 0,
                 0,
                 0,
                 0,
                 0,
                 0,
                 0,
                 0,
                 0,
                 0,
                 0,
                 0,
                 0,
                 0,
                 0,
                 0,
                 0,
                 0,
                 0,
                 0,
                 0,
                 0,
                 0,
                 0,
                 0,
                 0,
                 0,
                 0,
                 0,
                 0,
                 0,
                 0,
                 0,
                 0,
                 0,
                 0,
                 0,
                 0,
                 0,
                 0,
                 0,
                 0,
                 0,
                 0};
    _LUT.allocator = cv::Mat::getStdAllocator();
    _LUT.create(255, 4);
    for (int i = 0; i < 255; ++i)
    {
        _LUT(i, 0) = 1.0f / 255.0f * float(i);
        _LUT(i, 1) = r[i];
        _LUT(i, 2) = g[i];
        _LUT(i, 3) = b[i];
    }
}

LUTColorMapper::LUTColorMapper(cv::Mat LUT_)
    : _LUT(LUT_)
{
}

void LUTColorMapper::Apply(cv::InputArray input, cv::OutputArray output, cv::InputArray mask, cv::cuda::Stream& stream)
{
    (void)input;
    (void)output;
    (void)mask;
    (void)stream;
    CV_Assert(false && "Not implemented yet");
}

cv::Mat_<float> LUTColorMapper::getMat(float min, float max, int resolution)
{
    cv::Mat_<float> output(resolution, 4);
    int idx = 0;
    for (float i = min; i < max && idx < resolution; i += (max - min) / float(resolution), ++idx)
    {
        output(idx, 0) = i;
        cv::Vec3f result = Interpolate(i);
        output(idx, 1) = result[0];
        output(idx, 2) = result[1];
        output(idx, 3) = result[2];
    }
    return output;
}

void LUTColorMapper::Rescale(float alpha, float beta)
{
    for (int i = 0; i < _LUT.rows; ++i)
    {
        _LUT(i, 0) = _LUT(i, 0) * alpha - beta;
    }
}

cv::Vec3f LUTColorMapper::Interpolate(float x_)
{
    cv::Mat_<float> X = _LUT.col(0);
    auto itr = std::lower_bound(X.begin(), X.end(), x_);
    if (itr != X.end() && x_ < *itr)
    {
        int idx = static_cast<int>(itr - X.begin());
        if (idx == X.rows - 1)
        {
            // float deltaX = X(idx) - X(idx - 1);
            float x = x_ - X(idx - 1);

            float r = x * (_LUT(idx, 1) - _LUT(idx - 1, 1)) + _LUT(idx - 1, 1);
            float g = x * (_LUT(idx, 2) - _LUT(idx - 1, 2)) + _LUT(idx - 1, 2);
            float b = x * (_LUT(idx, 3) - _LUT(idx - 1, 3)) + _LUT(idx - 1, 3);
            return cv::Vec3f(r, g, b);
        }
        else
        {
            // float deltaX = X(idx + 1) - X(idx);
            float x = x_ - X(idx);

            float r = x * (_LUT(idx + 1, 1) - _LUT(idx, 1)) + _LUT(idx, 1);
            float g = x * (_LUT(idx + 1, 2) - _LUT(idx, 2)) + _LUT(idx, 2);
            float b = x * (_LUT(idx + 1, 3) - _LUT(idx, 3)) + _LUT(idx, 3);
            return cv::Vec3f(r, g, b);
        }
    }
    return cv::Vec3f(0, 0, 0);
}

struct LUTRegisterer
{
    LUTRegisterer()
    {
        ColorMapperFactory::Instance()->Register("Jet lookup table", [](float alpha, float beta) -> IColorMapper* {
            auto ptr = new LUTColorMapper();
            ptr->Rescale(alpha, beta);
            return ptr;
        });
    }
};
static LUTRegisterer g_registerer;
struct LUTRegistererRainbow
{
    LUTRegistererRainbow()
    {
        float r[] = {1,
                     1,
                     1,
                     1,
                     1,
                     1,
                     1,
                     1,
                     1,
                     1,
                     1,
                     1,
                     1,
                     1,
                     1,
                     1,
                     1,
                     1,
                     1,
                     1,
                     1,
                     1,
                     1,
                     1,
                     1,
                     1,
                     0.9365079365079367f,
                     0.8571428571428572f,
                     0.7777777777777777f,
                     0.6984126984126986f,
                     0.6190476190476191f,
                     0.53968253968254f,
                     0.4603174603174605f,
                     0.3809523809523814f,
                     0.3015873015873018f,
                     0.2222222222222223f,
                     0.1428571428571432f,
                     0.06349206349206415f,
                     0,
                     0,
                     0,
                     0,
                     0,
                     0,
                     0,
                     0,
                     0,
                     0,
                     0,
                     0,
                     0,
                     0.03174603174603208f,
                     0.08465608465608465f,
                     0.1375661375661377f,
                     0.1904761904761907f,
                     0.2433862433862437f,
                     0.2962962962962963f,
                     0.3492063492063493f,
                     0.4021164021164023f,
                     0.4550264550264553f,
                     0.5079365079365079f,
                     0.5608465608465609f,
                     0.6137566137566139f,
                     0.666666666666667f};
        float g[] = {0,
                     0.03968253968253968f,
                     0.07936507936507936f,
                     0.119047619047619f,
                     0.1587301587301587f,
                     0.1984126984126984f,
                     0.2380952380952381f,
                     0.2777777777777778f,
                     0.3174603174603174f,
                     0.3571428571428571f,
                     0.3968253968253968f,
                     0.4365079365079365f,
                     0.4761904761904762f,
                     0.5158730158730158f,
                     0.5555555555555556f,
                     0.5952380952380952f,
                     0.6349206349206349f,
                     0.6746031746031745f,
                     0.7142857142857142f,
                     0.753968253968254f,
                     0.7936507936507936f,
                     0.8333333333333333f,
                     0.873015873015873f,
                     0.9126984126984127f,
                     0.9523809523809523f,
                     0.992063492063492f,
                     1,
                     1,
                     1,
                     1,
                     1,
                     1,
                     1,
                     1,
                     1,
                     1,
                     1,
                     1,
                     0.9841269841269842f,
                     0.9047619047619047f,
                     0.8253968253968256f,
                     0.7460317460317465f,
                     0.666666666666667f,
                     0.587301587301587f,
                     0.5079365079365079f,
                     0.4285714285714288f,
                     0.3492063492063493f,
                     0.2698412698412698f,
                     0.1904761904761907f,
                     0.1111111111111116f,
                     0.03174603174603208f,
                     0,
                     0,
                     0,
                     0,
                     0,
                     0,
                     0,
                     0,
                     0,
                     0,
                     0,
                     0,
                     0};
        float b[] = {0,
                     0,
                     0,
                     0,
                     0,
                     0,
                     0,
                     0,
                     0,
                     0,
                     0,
                     0,
                     0,
                     0,
                     0,
                     0,
                     0,
                     0,
                     0,
                     0,
                     0,
                     0,
                     0,
                     0,
                     0,
                     0,
                     0,
                     0,
                     0,
                     0,
                     0,
                     0,
                     0,
                     0,
                     0,
                     0,
                     0,
                     0,
                     0.01587301587301582f,
                     0.09523809523809534f,
                     0.1746031746031744f,
                     0.2539682539682535f,
                     0.333333333333333f,
                     0.412698412698413f,
                     0.4920634920634921f,
                     0.5714285714285712f,
                     0.6507936507936507f,
                     0.7301587301587302f,
                     0.8095238095238093f,
                     0.8888888888888884f,
                     0.9682539682539679f,
                     1,
                     1,
                     1,
                     1,
                     1,
                     1,
                     1,
                     1,
                     1,
                     1,
                     1,
                     1,
                     1};
        cv::Mat_<float> LUT; //(cv::Mat::getStdAllocator());
        LUT.allocator = cv::Mat::getStdAllocator();
        LUT.create(64, 4);
        for (int i = 0; i < 64; ++i)
        {
            LUT(i, 0) = 1.0f / 64.0f * float(i);
            LUT(i, 1) = r[i];
            LUT(i, 2) = g[i];
            LUT(i, 3) = b[i];
        }
        ColorMapperFactory::Instance()->Register("Rainbow lookup table",
                                                 [LUT](float alpha, float beta) -> IColorMapper* {
                                                     auto ptr = new LUTColorMapper(LUT);
                                                     ptr->Rescale(alpha, beta);
                                                     return ptr;
                                                 });
    }
};
static LUTRegistererRainbow g_registerer_rainbow;
struct LUTRegistererHSV
{
    LUTRegistererHSV()
    {
        float r[] = {1,
                     1,
                     1,
                     1,
                     1,
                     1,
                     1,
                     1,
                     1,
                     1,
                     1,
                     0.9523809523809526f,
                     0.8571428571428568f,
                     0.7619047619047614f,
                     0.6666666666666665f,
                     0.5714285714285716f,
                     0.4761904761904763f,
                     0.3809523809523805f,
                     0.2857142857142856f,
                     0.1904761904761907f,
                     0.0952380952380949f,
                     0,
                     0,
                     0,
                     0,
                     0,
                     0,
                     0,
                     0,
                     0,
                     0,
                     0,
                     0,
                     0,
                     0,
                     0,
                     0,
                     0,
                     0,
                     0,
                     0,
                     0,
                     0,
                     0.09523809523809557f,
                     0.1904761904761905f,
                     0.2857142857142854f,
                     0.3809523809523809f,
                     0.4761904761904765f,
                     0.5714285714285714f,
                     0.6666666666666663f,
                     0.7619047619047619f,
                     0.8571428571428574f,
                     0.9523809523809523f,
                     1,
                     1,
                     1,
                     1,
                     1,
                     1,
                     1,
                     1,
                     1,
                     1,
                     1};
        float g[] = {0,
                     0.09523809523809523f,
                     0.1904761904761905f,
                     0.2857142857142857f,
                     0.3809523809523809f,
                     0.4761904761904762f,
                     0.5714285714285714f,
                     0.6666666666666666f,
                     0.7619047619047619f,
                     0.8571428571428571f,
                     0.9523809523809523f,
                     1,
                     1,
                     1,
                     1,
                     1,
                     1,
                     1,
                     1,
                     1,
                     1,
                     1,
                     1,
                     1,
                     1,
                     1,
                     1,
                     1,
                     1,
                     1,
                     1,
                     1,
                     0.9523809523809526f,
                     0.8571428571428577f,
                     0.7619047619047619f,
                     0.6666666666666665f,
                     0.5714285714285716f,
                     0.4761904761904767f,
                     0.3809523809523814f,
                     0.2857142857142856f,
                     0.1904761904761907f,
                     0.09523809523809579f,
                     0,
                     0,
                     0,
                     0,
                     0,
                     0,
                     0,
                     0,
                     0,
                     0,
                     0,
                     0,
                     0,
                     0,
                     0,
                     0,
                     0,
                     0,
                     0,
                     0,
                     0,
                     0};
        float b[] = {0,
                     0,
                     0,
                     0,
                     0,
                     0,
                     0,
                     0,
                     0,
                     0,
                     0,
                     0,
                     0,
                     0,
                     0,
                     0,
                     0,
                     0,
                     0,
                     0,
                     0,
                     0,
                     0.09523809523809523f,
                     0.1904761904761905f,
                     0.2857142857142857f,
                     0.3809523809523809f,
                     0.4761904761904762f,
                     0.5714285714285714f,
                     0.6666666666666666f,
                     0.7619047619047619f,
                     0.8571428571428571f,
                     0.9523809523809523f,
                     1,
                     1,
                     1,
                     1,
                     1,
                     1,
                     1,
                     1,
                     1,
                     1,
                     1,
                     1,
                     1,
                     1,
                     1,
                     1,
                     1,
                     1,
                     1,
                     1,
                     1,
                     0.9523809523809526f,
                     0.8571428571428577f,
                     0.7619047619047614f,
                     0.6666666666666665f,
                     0.5714285714285716f,
                     0.4761904761904767f,
                     0.3809523809523805f,
                     0.2857142857142856f,
                     0.1904761904761907f,
                     0.09523809523809579f,
                     0};
        cv::Mat_<float> LUT;
        LUT.allocator = cv::Mat::getStdAllocator();
        LUT.create(64, 4);
        for (int i = 0; i < 64; ++i)
        {
            LUT(i, 0) = 1.0f / 64.0f * float(i);
            LUT(i, 1) = r[i];
            LUT(i, 2) = g[i];
            LUT(i, 3) = b[i];
        }
        ColorMapperFactory::Instance()->Register("HSV lookup table", [LUT](float alpha, float beta) -> IColorMapper* {
            auto ptr = new LUTColorMapper(LUT);
            ptr->Rescale(alpha, beta);
            return ptr;
        });
    }
};
static LUTRegistererHSV g_registerer_hsv;

struct LUTRegistererHot
{
    LUTRegistererHot()
    {
        float r[] = {0,
                     0.03968253968253968f,
                     0.07936507936507936f,
                     0.119047619047619f,
                     0.1587301587301587f,
                     0.1984126984126984f,
                     0.2380952380952381f,
                     0.2777777777777778f,
                     0.3174603174603174f,
                     0.3571428571428571f,
                     0.3968253968253968f,
                     0.4365079365079365f,
                     0.4761904761904762f,
                     0.5158730158730158f,
                     0.5555555555555556f,
                     0.5952380952380952f,
                     0.6349206349206349f,
                     0.6746031746031745f,
                     0.7142857142857142f,
                     0.753968253968254f,
                     0.7936507936507936f,
                     0.8333333333333333f,
                     0.873015873015873f,
                     0.9126984126984127f,
                     0.9523809523809523f,
                     0.992063492063492f,
                     1,
                     1,
                     1,
                     1,
                     1,
                     1,
                     1,
                     1,
                     1,
                     1,
                     1,
                     1,
                     1,
                     1,
                     1,
                     1,
                     1,
                     1,
                     1,
                     1,
                     1,
                     1,
                     1,
                     1,
                     1,
                     1,
                     1,
                     1,
                     1,
                     1,
                     1,
                     1,
                     1,
                     1,
                     1,
                     1,
                     1,
                     1};
        float g[] = {0,
                     0,
                     0,
                     0,
                     0,
                     0,
                     0,
                     0,
                     0,
                     0,
                     0,
                     0,
                     0,
                     0,
                     0,
                     0,
                     0,
                     0,
                     0,
                     0,
                     0,
                     0,
                     0,
                     0,
                     0,
                     0,
                     0.03174603174603163f,
                     0.0714285714285714f,
                     0.1111111111111112f,
                     0.1507936507936507f,
                     0.1904761904761905f,
                     0.23015873015873f,
                     0.2698412698412698f,
                     0.3095238095238093f,
                     0.3492063492063491f,
                     0.3888888888888888f,
                     0.4285714285714284f,
                     0.4682539682539679f,
                     0.5079365079365079f,
                     0.5476190476190477f,
                     0.5873015873015872f,
                     0.6269841269841268f,
                     0.6666666666666665f,
                     0.7063492063492065f,
                     0.746031746031746f,
                     0.7857142857142856f,
                     0.8253968253968254f,
                     0.8650793650793651f,
                     0.9047619047619047f,
                     0.9444444444444442f,
                     0.984126984126984f,
                     1,
                     1,
                     1,
                     1,
                     1,
                     1,
                     1,
                     1,
                     1,
                     1,
                     1,
                     1,
                     1};
        float b[] = {0,
                     0,
                     0,
                     0,
                     0,
                     0,
                     0,
                     0,
                     0,
                     0,
                     0,
                     0,
                     0,
                     0,
                     0,
                     0,
                     0,
                     0,
                     0,
                     0,
                     0,
                     0,
                     0,
                     0,
                     0,
                     0,
                     0,
                     0,
                     0,
                     0,
                     0,
                     0,
                     0,
                     0,
                     0,
                     0,
                     0,
                     0,
                     0,
                     0,
                     0,
                     0,
                     0,
                     0,
                     0,
                     0,
                     0,
                     0,
                     0,
                     0,
                     0,
                     0.04761904761904745f,
                     0.1269841269841265f,
                     0.2063492063492056f,
                     0.2857142857142856f,
                     0.3650793650793656f,
                     0.4444444444444446f,
                     0.5238095238095237f,
                     0.6031746031746028f,
                     0.6825396825396828f,
                     0.7619047619047619f,
                     0.8412698412698409f,
                     0.92063492063492f,
                     1};

        cv::Mat_<float> LUT;
        LUT.allocator = cv::Mat::getStdAllocator();
        LUT.create(64, 4);
        for (int i = 0; i < 64; ++i)
        {
            LUT(i, 0) = 1.0f / 64.0f * float(i);
            LUT(i, 1) = r[i];
            LUT(i, 2) = g[i];
            LUT(i, 3) = b[i];
        }
        ColorMapperFactory::Instance()->Register("Hot lookup table", [LUT](float alpha, float beta) -> IColorMapper* {
            auto ptr = new LUTColorMapper(LUT);
            ptr->Rescale(alpha, beta);
            return ptr;
        });
    }
};
static LUTRegistererHot g_registerer_hot;
